{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useForkRef } from '@mui/material/utils';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityRowHeightSelector } from '../density/densitySelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridEditRowsStateSelector } from '../editRows/gridEditRowsSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../selection/gridSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils'; // Uses binary search to avoid looping through all possible positions\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function getIndexFromScroll(offset, positions) {\n  let sliceStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let sliceEnd = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : positions.length;\n\n  if (positions.length <= 0) {\n    return -1;\n  }\n\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? getIndexFromScroll(offset, positions, sliceStart, pivot) : getIndexFromScroll(offset, positions, pivot + 1, sliceEnd);\n}\nexport const getRenderableIndexes = _ref2 => {\n  let {\n    firstIndex,\n    lastIndex,\n    buffer,\n    minFirstIndex,\n    maxLastIndex\n  } = _ref2;\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\nexport const useGridVirtualScroller = props => {\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const {\n    ref,\n    disableVirtualization,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerWidth, setContainerWidth] = React.useState(null);\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  const computeRenderContext = React.useCallback(() => {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const firstRowIndex = getIndexFromScroll(top, rowsMeta.positions);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getIndexFromScroll(top + rootRef.current.clientHeight, rowsMeta.positions);\n    const firstColumnIndex = getIndexFromScroll(left, columnPositions);\n    const lastColumnIndex = getIndexFromScroll(left + containerWidth, columnPositions);\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [disableVirtualization, rowsMeta.positions, rootProps.autoHeight, currentPage.rows.length, columnPositions, containerWidth, visibleColumns.length]);\n  React.useEffect(() => {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  React.useEffect(() => {\n    setContainerWidth(rootRef.current.clientWidth);\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(() => {\n    if (rootRef.current) {\n      setContainerWidth(rootRef.current.clientWidth);\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const [initialFirstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer]);\n  React.useLayoutEffect(() => {\n    if (renderContext) {\n      updateRenderZonePosition(renderContext);\n    }\n  }, [renderContext, updateRenderZonePosition]);\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    setRenderContext(nextRenderContext);\n    prevRenderContext.current = nextRenderContext;\n  }, [setRenderContext, prevRenderContext]);\n  React.useEffect(() => {\n    if (containerWidth == null) {\n      return;\n    }\n\n    const initialRenderContext = computeRenderContext();\n    updateRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('rowsScroll', params);\n  }, [apiRef, computeRenderContext, containerWidth, updateRenderContext]);\n\n  const handleScroll = event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft; // On iOS and macOS, negative offsets are possible when swiping past the start\n\n    if (scrollLeft < 0 || scrollTop < 0 || !prevRenderContext.current) {\n      return;\n    } // When virtualization is disabled, the context never changes during scroll\n\n\n    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth; // TODO v6: rename event to a wider name, it's not only fired for row scrolling\n\n    apiRef.current.publishEvent('rowsScroll', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(() => {\n        updateRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  };\n\n  const handleWheel = event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  };\n\n  const handleTouchMove = event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  };\n\n  const getRows = function () {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      renderContext\n    };\n    const {\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerWidth\n    } = params;\n\n    if (!currentPage.range || !nextRenderContext || availableSpace == null) {\n      return null;\n    }\n\n    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const renderedRows = [];\n\n    for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n      const row = currentPage.rows[i];\n      renderedRows.push(row);\n      apiRef.current.unstable_calculateColSpan({\n        rowId: row.id,\n        minFirstColumn,\n        maxLastColumn\n      });\n    }\n\n    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    const rows = [];\n\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _rootProps$components;\n\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;\n      const targetRowHeight = apiRef.current.unstable_getRowHeight(id);\n      let isSelected;\n\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else if (typeof rootProps.isRowSelectable === 'function') {\n        isSelected = rootProps.isRowSelectable(apiRef.current.getRowParams(id));\n      } else {\n        isSelected = true;\n      }\n\n      rows.push( /*#__PURE__*/_jsx(rootProps.components.Row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: targetRowHeight,\n        cellFocus: cellFocus // TODO move to inside the row\n        ,\n        cellTabIndex: cellTabIndex // TODO move to inside the row\n        ,\n        editRowsState: editRowsState // TODO move to inside the row\n        ,\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: currentPage.range.firstRowIndex + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex\n      }, typeof getRowProps === 'function' ? getRowProps(id, model) : {}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.row), id));\n    }\n\n    return rows;\n  };\n\n  const needsHorizontalScrollbar = containerWidth && columnsTotalWidth > containerWidth;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = 2 * rowHeight; // Give room to show the overlay when there's no row.\n    }\n\n    return size;\n  }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, currentPage.rows.length, needsHorizontalScrollbar, rootProps.autoHeight, rowHeight]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n\n  if (rootProps.autoHeight && currentPage.rows.length === 0) {\n    contentSize.height = 2 * rowHeight; // Give room to show the overlay when there no rows.\n  }\n\n  const rootStyle = {};\n\n  if (!needsHorizontalScrollbar) {\n    rootStyle.overflowX = 'hidden';\n  }\n\n  const getRenderContext = React.useCallback(() => {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.unstable_getRenderContext = getRenderContext;\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: function () {\n      let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      let {\n        style = {}\n      } = _ref,\n          other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        onWheel: handleWheel,\n        onTouchMove: handleTouchMove,\n        style: _extends({}, style, rootStyle)\n      }, other);\n    },\n    getContentProps: function () {\n      let {\n        style = {}\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        style: _extends({}, style, contentSize)\n      };\n    },\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef\n    })\n  };\n};","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_extends","_excluded","React","ReactDOM","useForkRef","useGridApiContext","useGridRootProps","useGridSelector","gridVisibleColumnDefinitionsSelector","gridColumnsTotalWidthSelector","gridColumnPositionsSelector","gridDensityRowHeightSelector","gridFocusCellSelector","gridTabIndexCellSelector","gridEditRowsStateSelector","useGridVisibleRows","useGridApiEventHandler","clamp","selectedIdsLookupSelector","gridRowsMetaSelector","getFirstNonSpannedColumnToRender","jsx","_jsx","getIndexFromScroll","offset","positions","sliceStart","sliceEnd","length","pivot","Math","floor","itemOffset","getRenderableIndexes","firstIndex","lastIndex","buffer","minFirstIndex","maxLastIndex","useGridVirtualScroller","props","apiRef","rootProps","visibleColumns","ref","disableVirtualization","onRenderZonePositioning","renderZoneMinColumnIndex","renderZoneMaxColumnIndex","getRowProps","columnPositions","columnsTotalWidth","rowHeight","cellFocus","cellTabIndex","rowsMeta","editRowsState","selectedRowsLookup","currentPage","renderZoneRef","useRef","rootRef","handleRef","renderContext","setRenderContext","useState","prevRenderContext","scrollPosition","top","left","containerWidth","setContainerWidth","prevTotalWidth","computeRenderContext","useCallback","firstRowIndex","lastRowIndex","rows","firstColumnIndex","lastColumnIndex","current","autoHeight","clientHeight","useEffect","style","transform","scrollLeft","scrollTop","clientWidth","currentPageTotalHeight","handleResize","updateRenderZonePosition","nextRenderContext","firstRowToRender","lastRowToRender","rowBuffer","initialFirstColumnToRender","columnBuffer","firstColumnToRender","visibleRows","state","useLayoutEffect","updateRenderContext","initialRenderContext","params","publishEvent","handleScroll","event","currentTarget","topRowsScrolledSincePreviousRender","abs","bottomRowsScrolledSincePreviousRender","topColumnsScrolledSincePreviousRender","bottomColumnsScrolledSincePreviousRender","shouldSetState","rowThreshold","columnThreshold","flushSync","handleWheel","handleTouchMove","getRows","minFirstColumn","maxLastColumn","availableSpace","range","renderedRows","i","row","push","unstable_calculateColSpan","rowId","id","lastColumnToRender","renderedColumns","slice","_rootProps$components","model","lastVisibleRowIndex","targetRowHeight","unstable_getRowHeight","isSelected","isRowSelectable","getRowParams","components","Row","selected","index","isLastVisible","componentsProps","needsHorizontalScrollbar","contentSize","useMemo","height","max","shouldExtendContent","size","width","minHeight","rootStyle","overflowX","getRenderContext","unstable_getRenderContext","getRootProps","_ref","other","onScroll","onWheel","onTouchMove","getContentProps","getRenderZoneProps"],"sources":["/home/guicarboneti/C3SL/app-ministerio-x/node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useForkRef } from '@mui/material/utils';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityRowHeightSelector } from '../density/densitySelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridEditRowsStateSelector } from '../editRows/gridEditRowsSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../selection/gridSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils'; // Uses binary search to avoid looping through all possible positions\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function getIndexFromScroll(offset, positions, sliceStart = 0, sliceEnd = positions.length) {\n  if (positions.length <= 0) {\n    return -1;\n  }\n\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? getIndexFromScroll(offset, positions, sliceStart, pivot) : getIndexFromScroll(offset, positions, pivot + 1, sliceEnd);\n}\nexport const getRenderableIndexes = ({\n  firstIndex,\n  lastIndex,\n  buffer,\n  minFirstIndex,\n  maxLastIndex\n}) => {\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\nexport const useGridVirtualScroller = props => {\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const {\n    ref,\n    disableVirtualization,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerWidth, setContainerWidth] = React.useState(null);\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  const computeRenderContext = React.useCallback(() => {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const firstRowIndex = getIndexFromScroll(top, rowsMeta.positions);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getIndexFromScroll(top + rootRef.current.clientHeight, rowsMeta.positions);\n    const firstColumnIndex = getIndexFromScroll(left, columnPositions);\n    const lastColumnIndex = getIndexFromScroll(left + containerWidth, columnPositions);\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [disableVirtualization, rowsMeta.positions, rootProps.autoHeight, currentPage.rows.length, columnPositions, containerWidth, visibleColumns.length]);\n  React.useEffect(() => {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  React.useEffect(() => {\n    setContainerWidth(rootRef.current.clientWidth);\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(() => {\n    if (rootRef.current) {\n      setContainerWidth(rootRef.current.clientWidth);\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const [initialFirstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer]);\n  React.useLayoutEffect(() => {\n    if (renderContext) {\n      updateRenderZonePosition(renderContext);\n    }\n  }, [renderContext, updateRenderZonePosition]);\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    setRenderContext(nextRenderContext);\n    prevRenderContext.current = nextRenderContext;\n  }, [setRenderContext, prevRenderContext]);\n  React.useEffect(() => {\n    if (containerWidth == null) {\n      return;\n    }\n\n    const initialRenderContext = computeRenderContext();\n    updateRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('rowsScroll', params);\n  }, [apiRef, computeRenderContext, containerWidth, updateRenderContext]);\n\n  const handleScroll = event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft; // On iOS and macOS, negative offsets are possible when swiping past the start\n\n    if (scrollLeft < 0 || scrollTop < 0 || !prevRenderContext.current) {\n      return;\n    } // When virtualization is disabled, the context never changes during scroll\n\n\n    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth; // TODO v6: rename event to a wider name, it's not only fired for row scrolling\n\n    apiRef.current.publishEvent('rowsScroll', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(() => {\n        updateRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  };\n\n  const handleWheel = event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  };\n\n  const handleTouchMove = event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  };\n\n  const getRows = (params = {\n    renderContext\n  }) => {\n    const {\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerWidth\n    } = params;\n\n    if (!currentPage.range || !nextRenderContext || availableSpace == null) {\n      return null;\n    }\n\n    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const renderedRows = [];\n\n    for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n      const row = currentPage.rows[i];\n      renderedRows.push(row);\n      apiRef.current.unstable_calculateColSpan({\n        rowId: row.id,\n        minFirstColumn,\n        maxLastColumn\n      });\n    }\n\n    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    const rows = [];\n\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _rootProps$components;\n\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;\n      const targetRowHeight = apiRef.current.unstable_getRowHeight(id);\n      let isSelected;\n\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else if (typeof rootProps.isRowSelectable === 'function') {\n        isSelected = rootProps.isRowSelectable(apiRef.current.getRowParams(id));\n      } else {\n        isSelected = true;\n      }\n\n      rows.push( /*#__PURE__*/_jsx(rootProps.components.Row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: targetRowHeight,\n        cellFocus: cellFocus // TODO move to inside the row\n        ,\n        cellTabIndex: cellTabIndex // TODO move to inside the row\n        ,\n        editRowsState: editRowsState // TODO move to inside the row\n        ,\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: currentPage.range.firstRowIndex + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex\n      }, typeof getRowProps === 'function' ? getRowProps(id, model) : {}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.row), id));\n    }\n\n    return rows;\n  };\n\n  const needsHorizontalScrollbar = containerWidth && columnsTotalWidth > containerWidth;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = 2 * rowHeight; // Give room to show the overlay when there's no row.\n    }\n\n    return size;\n  }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, currentPage.rows.length, needsHorizontalScrollbar, rootProps.autoHeight, rowHeight]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n\n  if (rootProps.autoHeight && currentPage.rows.length === 0) {\n    contentSize.height = 2 * rowHeight; // Give room to show the overlay when there no rows.\n  }\n\n  const rootStyle = {};\n\n  if (!needsHorizontalScrollbar) {\n    rootStyle.overflowX = 'hidden';\n  }\n\n  const getRenderContext = React.useCallback(() => {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.unstable_getRenderContext = getRenderContext;\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: (_ref = {}) => {\n      let {\n        style = {}\n      } = _ref,\n          other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        onWheel: handleWheel,\n        onTouchMove: handleTouchMove,\n        style: _extends({}, style, rootStyle)\n      }, other);\n    },\n    getContentProps: ({\n      style = {}\n    } = {}) => ({\n      style: _extends({}, style, contentSize)\n    }),\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef\n    })\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}